version: '3.8'
name: treinamento-opentelemetry
services:
  # Microserviço de cadastro de livros
  cadastro_de_livros:
    build: ./book_store/cadastro_de_livros
    container_name: cadastro_de_livros
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - otel
    deploy: 
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    #####################################################################################################
    #### Adicione as variáveis de ambiente abaixo para configurar o envio de traces para o collector ####
    #####################################################################################################
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=cadastro-livros
      - POSTGRES_HOST=$POSTGRES_HOST
  
  # Microserviço Ordem de Compra
  ordem_de_compra:
    build: ./book_store/ordem_de_compra
    container_name: ordem_de_compra
    ports:
      - "8081:8081"
    depends_on:
      - db
      - cadastro_de_livros
    networks:
      - otel
    deploy: 
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    #####################################################################################################
    #### Adicione as variáveis de ambiente abaixo para configurar o envio de traces para o collector ####
    #####################################################################################################
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=ordem-compra
      - POSTGRES_HOST=$POSTGRES_HOST
      - BOOK_URL=$BOOK_URL
      - PAYMENT_URL=$PAYMENT_URL
  
  # Microserviço de Pagamento
  pagamento:
    build: ./book_store/pagamento
    container_name: pagamento
    ports:
      - "8082:8082"
    depends_on:
      - db
      - ordem_de_compra
    networks:
      - otel
    deploy: 
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    #####################################################################################################
    #### Adicione as variáveis de ambiente abaixo para configurar o envio de traces para o collector ####
    #####################################################################################################
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=pagamento
      - POSTGRES_HOST=$POSTGRES_HOST
      - ORDER_URL=$ORDER_URL
  
  # Banco de dados Postgres
  db:
    image: postgres:14
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 7s
      retries: 5
      start_period: 20s
    ports:
      - "5432:5432"
    networks:
      - otel
    deploy: 
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    volumes:
      - ./postgres_data:/var/lib/postgresql/data

  # OpenTelemetry Collector
  otelcollector:
    image: otel/opentelemetry-collector-contrib:0.111.0
    volumes:
      - ./config/collector/otelcol-config.yml:/etc/otel-collector-config.yml
    command:
      - "--config=/etc/otel-collector-config.yml"
      - "--set=service.telemetry.logs.level=INFO"
    ports:
      - "4317:4317" # Porta de recebimento de traces gRPC
      - "4318:4318" # Porta de recebimento de métricas HTTP
    networks:
      - otel
    deploy: 
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
  
  # Grafana para visualização de métricas, logs e traces
  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./config/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./config/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - otel
    deploy: 
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
  
  # Grafana Tempo para armaazenamento de traces
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/grafana/tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200"
    depends_on:
      - grafana
    networks:
      - otel
    deploy: 
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
  
  # Grafana Mimir para armazenamento de métricas
  mimir:
    image: grafana/mimir:latest
    command: [ "-config.file=/etc/mimir.yaml" ]
    volumes:
      - ./config/grafana/mimir.yaml:/etc/mimir.yaml
    ports:
      - "9009:9009"
    depends_on:
      - grafana
    networks:
      - otel
    deploy: 
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
  
  # Grafana Loki para armazenamento de logs
  loki: 
    image: grafana/loki:latest
    command: [ "-config.file=/etc/loki/loki.yaml" ]
    volumes:
      - ./config/grafana/loki.yaml:/etc/loki/loki.yaml
    ports:
      - "3100:3100"
      - '7946:7946'
    depends_on:
      - grafana
    networks:
      - otel
    deploy: 
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
  
  # Grafana K6 para gerar carga na aplicação
  ##########################################
  #### Adicione abaixo o serviço do K6 #####
  ##########################################

x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"

networks:
  otel:
    name: otel
    driver: bridge
